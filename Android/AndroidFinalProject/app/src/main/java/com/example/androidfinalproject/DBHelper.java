package com.example.androidfinalproject;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

import java.util.ArrayList;

public class DBHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "test.db";
    private static final int DATABASE_VERSION = 1;

    public DBHelper(@Nullable Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {

        sqLiteDatabase.execSQL("DROP TABLE IF EXISTS timedata");

        sqLiteDatabase.execSQL("CREATE TABLE timedata (id integer  PRIMARY KEY autoincrement, created_at DATETIME NOT NULL, studytime INT , studyid INT );");

        sqLiteDatabase.execSQL("DROP TABLE IF EXISTS studyinfo");
        sqLiteDatabase.execSQL("CREATE TABLE studyinfo (id integer  PRIMARY KEY autoincrement, name TEXT , obj TEXT);");
        sqLiteDatabase.execSQL("INSERT INTO timedata(created_at, studytime, studyid) VALUES('2024-10-24 03:53:10', 1966, 3), ('2024-11-22 18:31:05', 13196, 2), ('2024-11-24 23:51:22', 11836, 1), ('2024-11-30 15:23:25', 19444, 3), ('2024-10-21 07:37:29', 6043, 4), ('2024-11-25 01:07:58', 7225, 3), ('2024-10-16 22:46:52', 17127, 4), ('2024-11-29 06:38:06', 9312, 2), ('2024-10-30 12:57:49', 18468, 4), ('2024-09-04 22:55:56', 11081, 1), ('2024-10-31 07:57:34', 13813, 1), ('2024-11-30 18:28:31', 7087, 4), ('2024-11-30 06:43:24', 15827, 2), ('2024-09-05 15:25:22', 14748, 4), ('2024-11-22 11:43:48', 21127, 4), ('2024-09-26 20:47:53', 17967, 3), ('2024-10-07 13:01:58', 12764, 3), ('2024-10-13 16:33:57', 6688, 2), ('2024-11-04 09:56:40', 12734, 3), ('2024-11-14 20:16:11', 20528, 4), ('2024-09-01 02:57:23', 998, 4), ('2024-11-23 07:03:19', 12880, 1), ('2024-10-10 14:25:59', 14798, 2), ('2024-09-06 00:16:46', 2052, 2), ('2024-10-23 03:24:37', 9672, 3), ('2024-09-06 14:59:33', 14233, 2), ('2024-09-01 00:54:45', 10443, 4), ('2024-11-20 20:34:33', 8346, 3), ('2024-10-11 10:24:48', 7966, 4), ('2024-10-26 20:38:51', 11183, 4), ('2024-11-12 15:04:06', 1931, 1), ('2024-09-23 00:16:15', 10613, 1), ('2024-11-14 00:07:48', 15570, 4), ('2024-11-18 04:46:51', 12327, 1), ('2024-10-08 23:20:26', 4496, 1), ('2024-11-20 20:12:05', 9302, 2), ('2024-11-28 17:48:01', 19663, 1), ('2024-11-29 10:45:00', 2559, 1), ('2024-11-15 22:21:05', 11434, 4), ('2024-09-04 17:11:50', 18840, 3), ('2024-11-27 19:36:36', 13708, 2), ('2024-09-25 22:12:09', 7076, 1), ('2024-10-02 04:02:29', 20661, 3), ('2024-11-10 19:47:03', 12980, 4), ('2024-11-14 13:07:34', 8562, 1), ('2024-11-26 14:03:35', 7171, 2), ('2024-09-05 21:09:07', 18508, 3), ('2024-10-21 04:50:06', 14734, 3), ('2024-10-31 14:04:46', 5128, 1), ('2024-10-03 14:44:14', 15043, 4), ('2024-10-07 07:59:04', 1339, 3), ('2024-11-26 11:04:39', 14518, 2), ('2024-10-08 22:16:07', 10080, 3), ('2024-11-09 09:26:07', 3161, 4), ('2024-10-26 01:15:16', 9858, 4), ('2024-09-26 13:05:37', 10483, 4), ('2024-10-28 05:02:46', 20878, 1), ('2024-10-19 17:07:29', 7516, 2), ('2024-09-20 10:20:27', 12089, 2), ('2024-09-15 22:51:10', 13671, 1), ('2024-11-28 16:36:17', 10540, 4), ('2024-11-02 21:34:30', 16300, 3), ('2024-11-09 21:30:48', 18985, 4), ('2024-11-14 23:17:33', 18544, 4), ('2024-09-23 11:18:31', 15573, 2), ('2024-11-23 08:50:23', 13935, 1), ('2024-11-21 02:17:45', 8095, 2), ('2024-09-18 08:19:40', 4348, 1), ('2024-09-04 14:15:42', 7876, 2), ('2024-11-07 13:03:09', 1560, 1), ('2024-10-21 10:54:08', 13199, 1), ('2024-09-22 05:10:09', 3133, 4), ('2024-10-15 00:19:53', 3339, 2), ('2024-10-20 23:58:19', 15742, 1), ('2024-09-08 06:27:06', 15362, 4), ('2024-09-27 23:43:10', 1554, 1), ('2024-10-21 05:13:18', 15610, 2), ('2024-10-01 05:54:30', 14624, 4), ('2024-09-20 01:58:30', 13569, 4), ('2024-09-14 11:28:10', 12129, 3), ('2024-10-12 09:23:03', 14339, 1), ('2024-11-15 20:57:21', 19994, 4), ('2024-11-03 12:27:28', 5176, 3), ('2024-10-24 00:05:33', 3314, 4), ('2024-10-12 05:13:21', 7487, 1), ('2024-09-08 13:58:38', 14038, 1), ('2024-09-13 13:35:40', 4787, 3), ('2024-11-05 17:12:21', 19930, 1), ('2024-11-13 10:03:21', 2798, 4), ('2024-10-02 08:56:54', 11399, 1), ('2024-11-21 01:02:50', 13455, 1), ('2024-10-03 17:48:26', 7460, 4), ('2024-11-07 01:34:22', 21377, 1), ('2024-10-27 22:36:42', 12687, 1), ('2024-10-09 01:20:50', 20191, 3), ('2024-11-22 21:12:06', 14306, 1), ('2024-09-21 04:42:18', 12383, 4), ('2024-11-24 23:42:56', 16729, 2), ('2024-10-13 03:38:41', 1165, 4), ('2024-10-15 05:05:44', 18572, 1), ('2024-11-10 03:01:43', 15897, 1), ('2024-09-18 06:40:48', 8206, 1), ('2024-09-30 06:09:40', 19136, 1), ('2024-10-25 01:13:53', 796, 1), ('2024-10-08 13:11:37', 17562, 1), ('2024-10-19 19:20:12', 4740, 2), ('2024-10-30 03:14:48', 15150, 4), ('2024-09-16 11:54:50', 2380, 1), ('2024-09-17 12:52:24', 5111, 1), ('2024-10-22 18:42:04', 15618, 3), ('2024-11-13 03:24:37', 11859, 4), ('2024-11-23 09:41:18', 6088, 3), ('2024-09-21 08:09:24', 9483, 1), ('2024-10-28 18:15:35', 15668, 2), ('2024-09-28 04:38:35', 18772, 3), ('2024-11-25 16:15:40', 19999, 1), ('2024-10-11 22:34:59', 9377, 2), ('2024-11-18 03:05:54', 15284, 1), ('2024-11-14 17:29:25', 2318, 3), ('2024-10-03 01:09:41', 20478, 3), ('2024-10-17 20:55:27', 16217, 4), ('2024-11-17 12:46:02', 15282, 3), ('2024-09-30 17:01:25', 18001, 1), ('2024-09-23 09:49:32', 14875, 2), ('2024-11-03 08:43:58', 16448, 2), ('2024-10-28 19:00:22', 4043, 1), ('2024-09-24 10:12:02', 4515, 2), ('2024-11-05 22:24:14', 15375, 3), ('2024-09-30 00:29:31', 18561, 2), ('2024-11-23 19:17:05', 3760, 2), ('2024-09-05 05:10:00', 11925, 1), ('2024-11-28 06:34:11', 3559, 4), ('2024-10-27 16:29:42', 9552, 4), ('2024-10-13 04:20:30', 12493, 4), ('2024-09-14 07:35:09', 6880, 1), ('2024-11-29 13:40:41', 16009, 3), ('2024-09-07 19:51:56', 2526, 1), ('2024-11-04 07:55:19', 8373, 4), ('2024-10-25 18:07:51', 7739, 2), ('2024-09-15 00:08:27', 1701, 4), ('2024-10-09 16:48:21', 15816, 2), ('2024-09-20 16:44:45', 16976, 3), ('2024-11-11 16:27:46', 10696, 1), ('2024-11-06 06:18:35', 11505, 4), ('2024-11-15 20:57:32', 2536, 4), ('2024-11-06 07:12:12', 20953, 3), ('2024-11-07 12:57:33', 6974, 1), ('2024-09-29 20:46:51', 14853, 2), ('2024-09-21 08:37:59', 11075, 1), ('2024-09-10 09:48:53', 16840, 3), ('2024-09-25 04:25:54', 2536, 2), ('2024-11-14 16:02:38', 20437, 4), ('2024-09-14 02:47:59', 9725, 1), ('2024-10-15 20:07:11', 19466, 4), ('2024-11-01 15:10:27', 2327, 3), ('2024-09-05 04:50:55', 2773, 3), ('2024-09-11 13:59:11', 3948, 2), ('2024-10-26 15:37:55', 11556, 1), ('2024-10-15 07:53:49', 15302, 1), ('2024-11-19 13:51:25', 5996, 4), ('2024-11-03 14:36:32', 16690, 4), ('2024-09-29 21:49:24', 4391, 2), ('2024-10-02 13:36:12', 14173, 2), ('2024-11-30 14:35:27', 15059, 1), ('2024-11-11 13:24:45', 19965, 4), ('2024-09-27 14:06:43', 3727, 4), ('2024-10-01 02:29:52', 14999, 1), ('2024-09-04 22:29:22', 18506, 3), ('2024-11-04 21:17:07', 16516, 1), ('2024-11-13 00:54:00', 17264, 3), ('2024-11-22 22:54:25', 16826, 3), ('2024-10-23 10:15:07', 13281, 2), ('2024-10-10 09:09:14', 10939, 1), ('2024-11-28 23:11:04', 21582, 3), ('2024-09-04 03:56:40', 20857, 3), ('2024-11-23 16:32:12', 19756, 3), ('2024-10-23 10:00:23', 6351, 2), ('2024-11-27 12:26:48', 11528, 3), ('2024-11-02 05:09:11', 18799, 2), ('2024-10-22 01:11:22', 6578, 2), ('2024-09-22 21:51:54', 1666, 3), ('2024-09-29 01:47:50', 4500, 2), ('2024-09-09 02:54:29', 2682, 4), ('2024-11-17 18:03:17', 17580, 3), ('2024-11-16 16:32:41', 4886, 3), ('2024-09-21 18:56:13', 3780, 1), ('2024-10-31 17:33:24', 11457, 3), ('2024-10-01 22:24:22', 19426, 1), ('2024-10-14 03:51:06', 8448, 1), ('2024-09-26 22:44:21', 15229, 4), ('2024-11-15 03:10:50', 7387, 3), ('2024-11-13 11:09:06', 10404, 4), ('2024-09-09 21:36:28', 12731, 3), ('2024-09-17 16:32:12', 2344, 4), ('2024-09-06 05:52:49', 8002, 1), ('2024-10-01 01:34:11', 9977, 3), ('2024-10-13 08:47:25', 15341, 3), ('2024-10-30 11:07:32', 17121, 4), ('2024-10-27 01:47:31', 5329, 1), ('2024-10-29 05:36:59', 12909, 4);");

        sqLiteDatabase.execSQL("INSERT INTO studyinfo(name, obj) VALUES('과목1', '01:00:00'), ('과목2', '01:30:00'), ('과목3', '02:00:00'),('과목4', '00:30:00');");
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {

    }

    public byte[] getData(String key) {
        SQLiteDatabase db = getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT obj FROM studyinfo WHERE id = ?", new String[]{key});

        if (cursor.moveToFirst()) {
            byte[] data = cursor.getBlob(0);
            cursor.close();
            db.close();
            return data;
        }

        cursor.close();
        db.close();
        return null;
    }

    // Method to get daily statistics
    public Cursor getDailyStats(String date) {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT DATE(created_at) as date, SUM(studytime) as total_studytime " +
                "FROM timedata WHERE DATE(created_at) = ? GROUP BY DATE(created_at)";
        return db.rawQuery(query, new String[]{date});
    }

    // Method to get weekly statistics
    public Cursor getWeeklyStats(String year, String week) {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT strftime('%Y-%W', created_at) as week, SUM(studytime) as total_studytime " +
                "FROM timedata WHERE strftime('%Y', created_at) = ? " +
                "AND strftime('%W', created_at) = ? GROUP BY strftime('%Y-%W', created_at)";
        return db.rawQuery(query, new String[]{year, week});
    }

    // Method to get monthly statistics
    public Cursor getMonthlyStats(String year, String month) {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT strftime('%Y-%m', created_at) as month, SUM(studytime) as total_studytime " +
                "FROM timedata WHERE strftime('%Y', created_at) = ? " +
                "AND strftime('%m', created_at) = ? GROUP BY strftime('%Y-%m', created_at)";
        return db.rawQuery(query, new String[]{year, month});
    }
    public Cursor getDailyStats(int year, int month, int day) {
        SQLiteDatabase db = getReadableDatabase();

        String query = "SELECT SUM(studytime) AS total_studytime, " +
                "MIN(created_at) AS fastest_start_time, " +
                "MAX(created_at) AS latest_end_time, " +
                "strftime('%H', created_at) AS hour, " +
                "studyid, SUM(studytime) AS studytime " +
                "FROM timedata " +
                "WHERE strftime('%Y', created_at) = ? " +
                "AND strftime('%m', created_at) = ? " +
                "AND strftime('%d', created_at) = ? " +
                "GROUP BY hour, studyid";

        String[] args = {String.valueOf(year), String.format("%02d", month), String.format("%02d", day)};
        return db.rawQuery(query, args);
    }

}